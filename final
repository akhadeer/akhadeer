
#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>
#include<sys/types.h> 
#include<unistd.h>
#include<semaphore.h> 
 int track_var = 0; 
 int s1=0,s2=0,s3=0; 
 sem_t lock_var; 
 
int order[4]={}; 
int o=0;
struct sharedTable
{
 	int pen;
 	int paper;
 	int question_paper;
} ;

 void *sd1(void *arg)
{

 	sem_wait(&lock_var); 
	  	struct sharedTable *s = (struct sharedTable*)arg;
		    	s->pen+=1; 
 	if(s->pen==0 || s->paper==0 || s->question_paper==0)
 	{
 	 	s->pen-=1;
 	 	sem_post(&lock_var);
 	 	wait();
 	}	
 	else	
 	{	
 	 	if(s1==0)
 	 	{
 	 	printf("\n\t first student process completed\n") ;
 	 	track_var++; 
		s->pen=0;  
		s->paper=0;
 	 	s->question_paper=0; 
 	 	order[o]=1;  	 	
		o++;  	 	
		s1=1;
 	 	}
 	 	else
 	 	{
 	 	 	printf("\n\t choose other thing :-\n") ;
 	 	}
 	}
 	sem_post(&lock_var); 
}

 void *sd2(void *arg)
{
 	sem_wait(&lock_var); 
	struct sharedTable *s = (struct sharedTable*)arg; 
 	s->paper+=1;
 	if(s->pen==0||s->paper==0||s->question_paper==0) 
 	{ 	
 	 	s->paper-=1;
 	 	sem_post(&lock_var);
 	 	wait();
 	}	
 	else	
 	{	
 	 	if(s2==0)
 	 	{	
 	 	 	printf("\n\t Second student process  completed\n") ;
 	 	 	track_var++;
 	 	 	s->pen=0;
 	 	 	s->paper=0;
 	 	 	s->question_paper=0;
 	 	 	order[o]=2;
 	 	 	o++;
 	 	 	s2=1;
 	 	}	
 	 	else	
 	 	{	
 	 	 	printf("\n\t Try Choosing other thing :-\n") ;
 	 	}	
 	}		
 	sem_post( &lock_var);
}
 
void *sd3(void *arg)
{
 	sem_wait(&lock_var);
 	struct sharedTable *s = (struct sharedTable*)arg;
	s->question_paper+=1; 
 	if(s->pen==0||s->paper==0||s->question_paper==0)
 	{ 	s->question_paper-=1;
 	 	sem_post( &lock_var);
 	 	wait();
 	}	
 	else	
 	{	
 	 	if(s3==0)
 	 	{
 	 	printf("\n\t third student process completed \n") ;
 	 	track_var++;
 	 	s->pen=0;
 	 	s->paper=0;
 	 	s->question_paper=0;
 	 	order[o]=3;
 	 	o++;
 	 	s3=1;
 	 	}
 	 	else
 	 	{
 	 	printf("\n\t choose other:-\n") ;
 	 	}
 	}	
 	sem_post( &lock_var);
}
int main()
{
 	sem_init(&lock_var,0,1) ;
  	pthread_t t1 , t2 , t3; 
 	struct sharedTable s;
 	int choice;
 	printf("\n\t Initially The Students have\n") ;  	
	 printf("\t first student had  Pen  and need Paper and Question paper\n") ; 
	  	printf("\t second student had Paper and need Pen and Question paper\n") ;  
		  	printf("\t third student had Question_paper and need Pen and Paper\n") ;  
			  	while(track_var!=3)
 	{
 	 	printf("\n\t Enter the things you want to place on the Shared Table "); 	 	
		  printf("\t press 1 for Paper and Question paper\n") ;  	
		   	printf("\t press 2 for Pen and Question paper\n") ;
 	 	printf("\t press 3 for Pen and Paper\n") ;  	 
		  	scanf("%d",&choice);
 	 	s.pen=0;
 	 	s.paper=0;
 	 	s.question_paper=0;
 	 	switch( choice )
 	 	{  	 	 	case 1:
 	 	 	 	{
 	 	 	 	 	s.pen=0;
 	 	 	 	 	s.paper=1;
 	 	 	 	 	s.question_paper=1;
 	 	 	 	 	break;
 	 	 	 	}  	 	 
				case 2:
 	 	 	 	{
 	 	 	 	 	s.pen=1;
 	 	 	 	 	s.paper=0;
 	 	 	 	 	s.question_paper=1;  	 	 	 	
				 	break;
 	 	 	 	} 
 	 	 	case 3:
 	 	 	 	{
 	 	 	 	 	s.pen=1;
 	 	 	 	 	s.paper=1;
 	 	 	 	 	s.question_paper=0;  	 	 	 
				 	break;
 	 	 	 	}  	 	 
						default:
 	 	 	 	{
 	 	 	 	printf("\t wrong option\n") ;
 	 	 	 	}  	 	}
  	
		pthread_create(&t1,NULL,sd1,&s);
  	 
	  	pthread_create(&t2,NULL,sd2,&s);
	 
	  	pthread_create(&t3,NULL,sd3,&s);
  	 	
		pthread_join(t1,NULL) ;  	 
		pthread_join(t2,NULL) ;
 	 	pthread_join(t3,NULL) ;
 	}
 	printf("\t All students completed \n") ;
 	printf("\t In the Order\n") ;
 printf("\t Student %d -->> Student %d -->> Student %d \n",order[0],order[1],order[2]);
 return 0;
}
